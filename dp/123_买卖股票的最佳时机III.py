# -*- coding:utf-8 -*-
#@Time : 2021-06-02 21:24
#@Author: zxf_要努力
#@File : 123_买卖股票的最佳时机III.py
'''
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3
输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
输入：prices = [7,6,4,3,1]
输出：0
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
输入：prices = [1]
输出：0
'''
from typing import List


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
       dp_i10, dp_i20 = 0,0
       dp_i11, dp_i21 = float("-inf"),float("-inf")
       for price in prices:
           dp_i20 = max(dp_i20,dp_i21 + price)
           #这里为什么是dp_i10 因为只有两次买入的机会 #这里是第二次买入
           dp_i21 = max(dp_i21,dp_i10 - price)
           dp_i10 = max(dp_i10,dp_i11 + price)
           #这里为什么为 -price 因为这里是第一次买入 所有收入为-price
           dp_i11 = max(dp_i11,-price)
       return dp_i20