# encoding: utf-8
"""
@author: zxf_要努力
@file: 1758_生成交替二进制字符串的最少操作数.py
@time: 2022/4/6 20:17
"""

'''
给你一个仅由字符 '0' 和 '1' 组成的字符串 s 。一步操作中，你可以将任一 '0' 变成 '1' ，或者将 '1' 变成 '0' 。
交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 "010" 是交替字符串，
而字符串 "0100" 不是。
返回使 s 变成 交替字符串 所需的 最少 操作数。
'''
'''
输入：s = "0100"
输出：1
解释：如果将最后一个字符变为 '1' ，s 就变成 "0101" ，即符合交替字符串定义。
输入：s = "10"
输出：0
解释：s 已经是交替字符串。
输入：s = "1111"
输出：2
解释：需要 2 步操作得到 "0101" 或 "1010" 。

最终结果只可能是101010...和010101...之中的一种。
并且也很容易想到，变换成这两种字符串所需要的操作次数是互补的，即加起来等于字符串的长度。
因此，我们检验任意一种即可。这里用到index和字符所代表数字的异或。
'''


class Solution(object):
    def minOperations(self, s):
        """
        :type s: str
        :rtype: int
        """
        cnt = 0
        for i,num in enumerate(s):
            if (i%2) ^ int(num):
                cnt += 1
        return min(cnt,len(s)-cnt)




if __name__ == '__main__':
    s = "011111"
    print(Solution().minOperations(s))
